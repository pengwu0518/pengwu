// Code generated by dagger-compiler.  Do not edit.
package com.todo;

import dagger.internal.Binding;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class TodoModule$$ModuleAdapter extends ModuleAdapter<TodoModule> {
  private static final String[] INJECTS = { "members/com.todo.HelloAndroidActivity", "members/com.todo.EditActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public TodoModule$$ModuleAdapter() {
    super(com.todo.TodoModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map, TodoModule module) {
    map.put("com.todo.Manager", new ProvideManagerProvidesAdapter(module));
    map.put("android.database.sqlite.SQLiteDatabase", new ProvideDataBaseProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.todo.Manager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.todo.Manager} and its
   * dependencies.
   *
   * Being a {@code Provider<com.todo.Manager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideManagerProvidesAdapter extends Binding<Manager>
      implements Provider<Manager> {
    private final TodoModule module;
    private Binding<TodoManager> manager;

    public ProvideManagerProvidesAdapter(TodoModule module) {
      super("com.todo.Manager", null, IS_SINGLETON, "com.todo.TodoModule.provideManager()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      manager = (Binding<TodoManager>) linker.requestBinding("com.todo.TodoManager", TodoModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(manager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.todo.Manager>}.
     */
    @Override
    public Manager get() {
      return module.provideManager(manager.get());
    }
  }

  /**
   * A {@code Binding<android.database.sqlite.SQLiteDatabase>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.database.sqlite.SQLiteDatabase>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideDataBaseProvidesAdapter extends Binding<android.database.sqlite.SQLiteDatabase>
      implements Provider<android.database.sqlite.SQLiteDatabase> {
    private final TodoModule module;

    public ProvideDataBaseProvidesAdapter(TodoModule module) {
      super("android.database.sqlite.SQLiteDatabase", null, NOT_SINGLETON, "com.todo.TodoModule.provideDataBase()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.database.sqlite.SQLiteDatabase>}.
     */
    @Override
    public android.database.sqlite.SQLiteDatabase get() {
      return module.provideDataBase();
    }
  }
}
